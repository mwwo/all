<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEYtGABELRgDOiAKODcaBIMyFQCXMhYAljIW
        AJYyFgCWMhYAljIWAJYyFgCWMhYAljIWAJYyFgCWMhYAljIWAJYyFgCWMhYAljIWAJYyFgCWMhYAljIW
        AJY1FwKVOh0IZjkiCxwiAAAAKhYAAAAAAAAAAAAAAAAAAAAAAAAzGAAANRwDBDcaBG41FwLrNRUA/zUV
        AP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUV
        AP81FQD/NRUA/zUVAP81FgH9NRcCyDYYAjI2FwEAMRcAAAAAAAAAAAAAMBYKADcYAAAxFgBZNBYA8jUV
        AP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUV
        AP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRYByDQaAxw2GgMAAAAAAAAAAAA6IhAAOCIQDTMY
        Ar41FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUV
        AP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD+NRkEbDAOAAAAAAAAAAAAADsl
        DgA8JhAtNBkC6jUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUV
        AP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP85HAeg////AYZ0
        XQAAAAAANB4DADQfBD8zGAH2NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUV
        AP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/0Ek
        Db1/a04Ic1xAAAAAAAAzHQIAMx4CPzIYAPY1FQD/NRUA/zUVAP81FQD/NRUA/zUVAP80FQD/NRUA/zUV
        AP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP80FAD/MxUA/zMVAP80FQD/NRUA/zUVAP81FQD/NRUA/zUV
        AP81FQD/QiQNwHxnSQlxWT0AAAAAADMdAgAzHgI/MxgA9jUVAP81FQD/NRUA/zUVAP82FgD/PBoB/z0b
        Av82GQH/NBcA/zUWAP81FwD/NRcA/zUXAP81FgD/NRUA/0IgA/9NKgb/UCwG/0omBf84GAH/MxQA/zUV
        AP81FQD/NRUA/zUVAP9CJA3AfGdJCXFZPQAAAAAAMx0CADMeAj8zGAD2NRUA/zUVAP81FQD/MxQA/04n
        Bf/Bex7/0IUi/3BFDf8xFgD/NRcA/zUXAP81FwD/NRcA/zMVAP9pPAz/1osk/+mZKP/rmij/5JUn/7Jx
        HP9RLAf/MxYA/zUWAP81FQD/NRUA/0IkDcB8Z0kJcVk9AAAAAAAzHQIAMx4CPzMYAPY1FQD/NRUA/zUV
        AP8zEwD/Vy4H/+2eKP//rC7/hFQS/zAVAP81FwD/NRcA/zUXAP81FwD/MRQA/4hUE//+qS7/7Zsp/+iY
        KP/2oiv//6su/716H/88HQL/NBUA/zUVAP81FQD/QiQNwHxnSQlxWT0AAAAAADMdAgAzHgI/MxgA9jUV
        AP81FQD/NRUA/zMTAP9XLQf/7Zwo//+qLf+DUhH/LhQA/zQWAP80FwD/NRcA/zUXAP8zFQD/ZDgK/39M
        Ef9RKgb/SSUE/6VoGP//qy7/55go/00pBf8zFQD/NRUA/zUVAP9CJA3AfGdJCXFZPQAAAAAAMx0CADMe
        Aj8zGAD2NRUA/zUVAP81FQD/MxMA/1ctB//tnCj//6ot/5VeFf9NKAX/TCgF/z4eAv8yFgD/MxcA/zUX
        AP80FQD/MhMA/1UsB/+ZXxf/5JUn//+rLv/dkib/SCUE/zQUAP81FQD/NRUA/0IkDcB8Z0kJcVk9AAAA
        AAAzHQIAMx4CPzMYAPY1FQD/NRUA/zUVAP8zEwD/Vy0H/+2cKP//qS3/8p8q/+qZKP/nlyj/zYUi/4dU
        E/87HgL/MxYA/zgYAf+IUxP/6Jgo//+qLv//rC7/750q/4VTE/81FwD/NRUA/zUVAP81FQD/QiQNwHxn
        SQlxWT0AAAAAADMdAgAzHgI/MxgA9jUVAP81FQD/NRUA/zMTAP9XLQf/7Zwo//+pLf/ynyr/6pop//mm
        LP//rC7/+6ct/51kGP80FgD/aDsL//KgK///qi7/6Zko/6tuG/9fOAv/MxgB/zQXAP81FQD/NRUA/zUV
        AP9CJA3AfGdJCXFZPQAAAAAAMx0CADMeAj8zGAD2NRUA/zUVAP81FQD/MxMA/1ctB//tnCj//6ot/5Re
        Fv9KKgX/a0EM/8WBIP//qi7/7Zwp/1cvCP+EUhL//6ou//CeKv9sQQ3/NRoB/0IjA/9LKgX/NBcA/zUV
        AP81FQD/NRUA/0IkDcB8Z0kJcVk9AAAAAAAzHQIAMx4CPzMYAPY1FQD/NRUA/zUVAP8zEwD/Vy0H/+2c
        KP//qi3/hFIT/yoUAP8qFAD/YzsL//aiK///qC3/fE0R/2Y8C//0oir/+6Ys/8mCIf+/fB//3pIl/6Rp
        GP8zFgD/NRUA/zUVAP81FQD/QiQNwHxnSQlxWT0AAAAAADMdAgAzHgI/MxgA9jUVAP81FQD/NRUA/zMT
        AP9XLQf/7Zwo//+qLf+DUhP/KhQA/yoUAP9hOgv/9aEr//+pLf+AUBL/NRcA/5VdFf/snCj//qot//+s
        Lf/9qCv/oWYX/zMWAP81FQD/NRUA/zUVAP9CJA3AfGdJCXFZPQAAAAAAMx0CADMeAj8zGAD2NRUA/zUV
        AP81FQD/MxMA/1ctB//tnCj//6ot/5dfFv9LKgX/Zj0M/8N/If//qi7/7p0q/1wyCf8yEwD/NxcB/1cv
        B/97ShH/gk8S/2s9C/9IIwT/NBUA/zUVAP81FQD/NRUA/0IkDcB8Z0kJcVk9AAAAAAAzHQIAMx4CPzMY
        APY1FQD/NRUA/zUVAP8zEwD/Vy0H/+2cKP//qi3/86Aq/+qZKP/3oyv//6su//yoLf+jZhn/OBgB/zUV
        AP81FQD/MxMA/zISAP8yEgD/MhMA/zQUAP81FQD/NRUA/zUVAP81FQD/QiQNwHxnSQlxWT0AAAAAADMd
        AgAzHgI/MxgA9jUVAP81FQD/NRUA/zMUAP9TKwb/3I8k//OgK//3oy3/+KUt/++dKf/YjCT/kFgV/z8d
        Av80FAD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP9CJA3AfGdJCXFZ
        PQAAAAAAMx0CADMeAj8zGAD2NRUA/zUVAP81FQD/NRUA/zkYAf9SKwX/XjQK/2Q5Df9mOg3/Vy8I/0Qg
        A/80FAD/NBQA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/0Ik
        DcB8Z0kJcVk9AAAAAAAzHQIAMx4CPzIYAPY1FQD/NRUA/zUVAP81FQD/NRUA/zMUAP8yEwD/MhMA/zIT
        AP8zEwD/NBQA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUV
        AP81FQD/QiUOwH1oSwlyWj8AAAAAADokDAA7JQ00NBkC7zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUV
        AP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUV
        AP81FQD/NRUA/zUVAP89IAqroZp8A39tUwAAAAAAPiYRAD4nEhQ2GQPPNRUA/zUVAP81FQD/NRUA/zUV
        AP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUVAP81FQD/NRUA/zUV
        AP81FQD/NRUA/zUVAP81FQD/NRUA/zYZA38zDgAAAAAAAAAAAABROykAAAAAADgcBXY0FgD9NBYA/zQW
        AP80FgD/NBYA/zQWAP80FgD/NBYA/zQWAP80FgD/NBYA/zQWAP80FgD/NBYA/zQWAP80FgD/NBYA/zQW
        AP80FgD/NBYA/zQWAP80FgD/NBYA/zQWAP81FwLfOB0HLDgcBgAAAAAAAAAAAAAAAAA8IwwAPSUOEjgd
        BqUzGAH7MhcA/zIXAP8yFwD/MhcA/zIXAP8yFwD/MhcA/zIXAP8yFwD/MhcA/zIXAP8yFwD/MhcA/zIX
        AP8yFwD/MhcA/zIXAP8yFwD/MhcA/zIXAP8yFwD/NRoD6D8lD10AAAAAPSQQAAAAAAAAAAAAAAAAAAAA
        AAA4HAcAQyoUEDYdB2YyGgO1OCAI2DkhCuE5IQrhOSEK4TkhCuE5IQrhOSEK4TkhCuE5IQrhOSEK4Tkh
        CuE5IQrhOSEK4TkhCuE5IQrhOSEK4TkhCuE5IQrgNR0GzDIZA5k3Hwk6eWRPAmROOQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABlVj8AWlE7AEQwGgdeSzIYXEgvHlxILx5cSC8eXEgvHlxILx5cSC8eXEgvHlxI
        Lx5cSC8eXEgvHlxILx5cSC8eXEgvHlxILx5cSC8eXEgvHl1JMB5YRC4RRjEeAzUgDAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////////4AAAH8AAAA/AAAAHgAAAB4AAAAOAAAADgAAAA4AA
        AAOAAAADgAAAA4AAAAOAAAADgAAAA4AAAAOAAAADgAAAA4AAAAOAAAADgAAAA4AAAAOAAAADgAAAA4AA
        AAOAAAAHwAAAB8AAAA/gAAAP8AAAP/////8=
</value>
  </data>
</root>