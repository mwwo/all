<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textBox1.Text" xml:space="preserve">
    <value>413
1345
144
930
1666
628
1267
598
372
853
1123
35
421
1231
1737
1879
74
303
388
751
1719
52
701
1014
747
1281
50
871
1258
1836
1985
638
1421
1725
818
134
397
940
1674
631
756
782
1966
11
1361
233
1383
412
353
197
922
1913
16
187
529
995
1068
1285
1491
1660
1971
564
936
1779
1869
1915
1965
418
47
63
421
1289
1364
1500
1558
1855
161
177
300
462
956
1038
1090
1208
1300
1505
1614
1775
1813
450
593
781
943
961
1422
89
247
468
731
860
1760
1472
199
840
1818
29
370
396
506
683
896
1122
1391
1607
85
223
275
333
357
465
557
566
621
675
768
859
904
929
1002
1049
1058
1131
1233
1276
1482
1834
1928
1934
83
139
185
205
399
402
471
480
587
651
780
914
1097
1269
1583
1651
1667
280
602
846
1135
1770
17
641
688
1291
551
658
613
646
666
1983
154
1817
1900
198
345
395
533
668
1192
1272
1376
1479
1733
1874
575
773
980
525
570
715
812
874
410
990
25
710
126
749
878
1893
30
91
218
222
263
285
290
330
352
478
484
623
636
730
794
892
1035
1328
1392
1510
1754
1899
1910
1987
1991
72
162
359
380
392
393
394
423
611
643
645
672
728
1187
1221
1307
1742
24
182
315
411
522
750
803
1011
1154
1253
1401
1518
1845
77
298
1155
535
38
193
491
655
732
1129
66
98
125
167
168
186
268
278
294
428
446
461
497
554
565
567
674
709
753
767
838
881
915
1249
1286
1306
1412
1679
1758
1765
1815
1889
1947
19
28
76
78
94
145
147
163
202
234
242
257
269
276
288
307
320
335
338
363
364
367
377
419
431
439
463
486
515
632
729
778
866
876
911
928
948
969
978
983
1000
1001
1026
1036
1041
1139
1224
1263
1503
1569
1588
1592
1670
1739
1837
1925
15
18
65
96
111
128
155
171
249
262
293
341
373
437
482
550
590
603
634
743
920
1067
1070
1081
1143
1318
1419
1608
1685
1750
1995
36
53
86
151
326
391
488
516
538
572
601
662
671
705
713
762
1099
1108
1165
1316
1525
1562
1579
1631
62
100
726
1144
204
5
81
1921
1040
1266
1288
174
775
108
259
260
415
430
673
779
1959
1366
1481
12
48
304
371
870
898
1341
761
9
758
793
828
988
214
215
296
795
939
1009
1117
1407
1468
82
118
137
140
195
225
325
340
560
656
769
801
887
908
968
979
1064
1072
1075
1103
1283
1377
1423
1698
1721
1810
143
212
224
287
324
541
555
568
612
670
677
699
882
925
997
1265
1332
1343
1358
1372
1378
1404
1701
1757
1812
114
374
383
472
546
964
1006
1478
37
57
157
188
219
365
429
440
485
499
508
544
639
719
985
1299
1368
1437
1541
1735
1905
241
696
1151
1442
1711
14
343
362
481
981
1938
159
310
361
407
452
501
873
886
888
1112
1652
4
6
8
10
135
148
230
232
252
267
271
443
445
477
496
604
649
669
808
829
954
1147
1171
1191
1202
1309
1353
1507
1524
1648
1693
1868
1883
67
75
104
132
158
173
192
194
206
235
264
337
355
401
420
426
474
494
504
518
531
539
558
629
644
678
702
707
711
721
733
737
740
772
777
806
813
821
852
857
869
877
1016
1054
1083
1106
1162
1194
1256
1310
1319
1369
1440
1467
1473
1542
1586
1609
1622
1629
1678
1759
1783
1807
1917
1931
1932
1951
1975
7
49
102
166
319
322
332
385
387
398
416
444
451
500
520
548
571
573
574
607
609
706
717
734
755
826
848
868
885
889
890
917
965
1096
1132
1160
1175
1199
1245
1296
1374
1403
1433
1557
1564
1657
1658
1661
1662
1751
1753
1809
1835
1864
1993
1994
116
120
141
184
311
314
321
349
469
576
685
714
752
754
823
845
893
894
945
952
977
989
996
1005
1012
1051
1161
1280
1379
1409
1471
1540
1656
1802
1822
1906
101
123
129
150
283
313
376
414
442
513
625
633
637
676
697
725
735
802
867
891
933
994
1021
1115
1125
1128
1138
1230
1305
1357
1400
1493
1522
1605
1718
1723
1804
1847
1956
1963
2000
348
578
80
784
704
229
45
309
682
759
69
179
216
244
323
334
342
346
438
459
514
519
610
684
13
217
318
537
540
600
133
153
226
246
344
378
475
583
661
665
692
760
435
250
589
712
258
350
389
561
786
21
27
84
93
119
146
175
208
266
273
360
369
405
417
458
493
511
547
559
693
700
741
40
44
55
71
87
95
107
109
112
136
152
165
176
189
210
213
245
261
272
289
312
328
386
408
495
509
510
534
553
569
577
619
630
681
689
691
720
723
736
738
739
765
788
43
58
68
79
88
117
169
180
200
207
211
270
305
366
381
406
448
507
527
536
556
581
582
585
614
618
663
686
690
695
757
771
42
59
99
237
279
295
339
368
404
432
521
543
596
624
648
722
742
787
789
791
3
20
33
41
60
90
115
203
227
228
231
239
243
251
254
255
274
282
292
316
317
327
358
375
379
409
447
449
454
473
487
502
524
542
545
615
627
654
679
703
744</value>
  </data>
</root>